{"ast":null,"code":"/*!\r\n * node-sass: lib/extensions.js\r\n */\n\nvar eol = require('os').EOL,\n  fs = require('fs'),\n  path = require('path'),\n  trueCasePathSync = require('true-case-path'),\n  pkg = require('../package.json'),\n  defaultBinaryDir = path.join(__dirname, '..', 'vendor');\n\n/**\r\n * Get the human readable name of the Platform that is running\r\n *\r\n * @param  {string} platform - An OS platform to match, or null to fallback to\r\n * the current process platform\r\n * @return {Object} The name of the platform if matched, false otherwise\r\n *\r\n * @api public\r\n */\nfunction getHumanPlatform(platform) {\n  switch (platform || process.platform) {\n    case 'darwin':\n      return 'OS X';\n    case 'freebsd':\n      return 'FreeBSD';\n    case 'linux':\n      return 'Linux';\n    case 'linux_musl':\n      return 'Linux/musl';\n    case 'win32':\n      return 'Windows';\n    default:\n      return false;\n  }\n}\n\n/**\r\n * Provides a more readable version of the architecture\r\n *\r\n * @param  {string} arch - An instruction architecture name to match, or null to\r\n * lookup the current process architecture\r\n * @return {Object} The value of the process architecture, or false if unknown\r\n *\r\n * @api public\r\n */\nfunction getHumanArchitecture(arch) {\n  switch (arch || process.arch) {\n    case 'ia32':\n      return '32-bit';\n    case 'x86':\n      return '32-bit';\n    case 'x64':\n      return '64-bit';\n    default:\n      return false;\n  }\n}\n\n/**\r\n * Get the friendly name of the Node environment being run\r\n *\r\n * @param  {Object} abi - A Node Application Binary Interface value, or null to\r\n * fallback to the current Node ABI\r\n * @return {Object} Returns a string name of the Node environment or false if\r\n * unmatched\r\n *\r\n * @api public\r\n */\nfunction getHumanNodeVersion(abi) {\n  switch (parseInt(abi || process.versions.modules, 10)) {\n    case 11:\n      return 'Node 0.10.x';\n    case 14:\n      return 'Node 0.12.x';\n    case 42:\n      return 'io.js 1.x';\n    case 43:\n      return 'io.js 1.1.x';\n    case 44:\n      return 'io.js 2.x';\n    case 45:\n      return 'io.js 3.x';\n    case 46:\n      return 'Node.js 4.x';\n    case 47:\n      return 'Node.js 5.x';\n    case 48:\n      return 'Node.js 6.x';\n    case 49:\n      return 'Electron 1.3.x';\n    case 50:\n      return 'Electron 1.4.x';\n    case 51:\n      return 'Node.js 7.x';\n    case 53:\n      return 'Electron 1.6.x';\n    case 57:\n      return 'Node.js 8.x';\n    case 59:\n      return 'Node.js 9.x';\n    case 64:\n      return 'Node.js 10.x';\n    case 67:\n      return 'Node.js 11.x';\n    case 72:\n      return 'Node.js 12.x';\n    case 79:\n      return 'Node.js 13.x';\n    case 83:\n      return 'Node.js 14.x';\n    case 88:\n      return 'Node.js 15.x';\n    case 93:\n      return 'Node.js 16.x';\n    case 102:\n      return 'Node.js 17.x';\n    default:\n      return false;\n  }\n}\n\n/**\r\n * Get a human readable description of where node-sass is running to support\r\n * user error reporting when something goes wrong\r\n *\r\n * @param  {string} env - The name of the native bindings that is to be parsed\r\n * @return {string} A description of what os, architecture, and Node version\r\n * that is being run\r\n *\r\n * @api public\r\n */\nfunction getHumanEnvironment(env) {\n  var binding = env.replace(/_binding\\.node$/, ''),\n    parts = binding.split('-'),\n    platform = getHumanPlatform(parts[0]),\n    arch = getHumanArchitecture(parts[1]),\n    runtime = getHumanNodeVersion(parts[2]);\n  if (parts.length !== 3) {\n    return 'Unknown environment (' + binding + ')';\n  }\n  if (!platform) {\n    platform = 'Unsupported platform (' + parts[0] + ')';\n  }\n  if (!arch) {\n    arch = 'Unsupported architecture (' + parts[1] + ')';\n  }\n  if (!runtime) {\n    runtime = 'Unsupported runtime (' + parts[2] + ')';\n  }\n  return [platform, arch, 'with', runtime].join(' ');\n}\n\n/**\r\n * Get the value of the binaries under the default path\r\n *\r\n * @return {Array} The currently installed node-sass bindings\r\n *\r\n * @api public\r\n */\nfunction getInstalledBinaries() {\n  return fs.readdirSync(getBinaryDir());\n}\n\n/**\r\n * Check that an environment matches the allowlisted values or the current\r\n * environment if no parameters are passed\r\n *\r\n * @param  {string} platform - The name of the OS platform(darwin, win32, etc...)\r\n * @param  {string} arch - The instruction set architecture of the Node environment\r\n * @param  {string} abi - The Node Application Binary Interface\r\n * @return {Boolean} True, if node-sass supports the current platform, false otherwise\r\n *\r\n * @api public\r\n */\nfunction isSupportedEnvironment(platform, arch, abi) {\n  return false !== getHumanPlatform(platform) && false !== getHumanArchitecture(arch) && false !== getHumanNodeVersion(abi);\n}\n\n/**\r\n * Get the value of a CLI argument\r\n *\r\n * @param {String} name\r\n * @param {Array} args\r\n * @api private\r\n */\n\nfunction getArgument(name, args) {\n  var flags = args || process.argv.slice(2),\n    index = flags.lastIndexOf(name);\n  if (index === -1 || index + 1 >= flags.length) {\n    return null;\n  }\n  return flags[index + 1];\n}\n\n/**\r\n * Get binary name.\r\n * If environment variable SASS_BINARY_NAME,\r\n * .npmrc variable sass_binary_name or\r\n * process argument --binary-name is provided,\r\n * return it as is, otherwise make default binary\r\n * name: {platform}-{arch}-{v8 version}.node\r\n *\r\n * @api public\r\n */\n\nfunction getBinaryName() {\n  var binaryName,\n    variant,\n    platform = process.platform;\n  if (getArgument('--sass-binary-name')) {\n    binaryName = getArgument('--sass-binary-name');\n  } else if (process.env.SASS_BINARY_NAME) {\n    binaryName = process.env.SASS_BINARY_NAME;\n  } else if (process.env.npm_config_sass_binary_name) {\n    binaryName = process.env.npm_config_sass_binary_name;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryName) {\n    binaryName = pkg.nodeSassConfig.binaryName;\n  } else {\n    variant = getPlatformVariant();\n    if (variant) {\n      platform += '_' + variant;\n    }\n    binaryName = [platform, '-', process.arch, '-', process.versions.modules].join('');\n  }\n  return [binaryName, 'binding.node'].join('_');\n}\n\n/**\r\n * Determine the URL to fetch binary file from.\r\n * By default fetch from the node-sass distribution\r\n * site on GitHub.\r\n *\r\n * The default URL can be overridden using\r\n * the environment variable SASS_BINARY_SITE,\r\n * .npmrc variable sass_binary_site or\r\n * or a command line option --sass-binary-site:\r\n *\r\n *   node scripts/install.js --sass-binary-site http://example.com/\r\n *\r\n * The URL should to the mirror of the repository\r\n * laid out as follows:\r\n *\r\n * SASS_BINARY_SITE/\r\n *\r\n *  v3.0.0\r\n *  v3.0.0/freebsd-x64-14_binding.node\r\n *  ....\r\n *  v3.0.0\r\n *  v3.0.0/freebsd-ia32-11_binding.node\r\n *  v3.0.0/freebsd-x64-42_binding.node\r\n *  ... etc. for all supported versions and platforms\r\n *\r\n * @api public\r\n */\n\nfunction getBinaryUrl() {\n  var site = getArgument('--sass-binary-site') || process.env.SASS_BINARY_SITE || process.env.npm_config_sass_binary_site || pkg.nodeSassConfig && pkg.nodeSassConfig.binarySite || 'https://github.com/sass/node-sass/releases/download';\n  return [site, 'v' + pkg.version, getBinaryName()].join('/');\n}\n\n/**\r\n * Get binary dir.\r\n * If environment variable SASS_BINARY_DIR,\r\n * .npmrc variable sass_binary_dir or\r\n * process argument --sass-binary-dir is provided,\r\n * select it by appending binary name, otherwise\r\n * use default binary dir.\r\n * Once the primary selection is made, check if\r\n * callers wants to throw if file not exists before\r\n * returning.\r\n *\r\n * @api public\r\n */\n\nfunction getBinaryDir() {\n  var binaryDir;\n  if (getArgument('--sass-binary-dir')) {\n    binaryDir = getArgument('--sass-binary-dir');\n  } else if (process.env.SASS_BINARY_DIR) {\n    binaryDir = process.env.SASS_BINARY_DIR;\n  } else if (process.env.npm_config_sass_binary_dir) {\n    binaryDir = process.env.npm_config_sass_binary_dir;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryDir) {\n    binaryDir = pkg.nodeSassConfig.binaryDir;\n  } else {\n    binaryDir = defaultBinaryDir;\n  }\n  return binaryDir;\n}\n\n/**\r\n * Get binary path.\r\n * If environment variable SASS_BINARY_PATH,\r\n * .npmrc variable sass_binary_path or\r\n * process argument --sass-binary-path is provided,\r\n * select it by appending binary name, otherwise\r\n * make default binary path using binary name.\r\n * Once the primary selection is made, check if\r\n * callers wants to throw if file not exists before\r\n * returning.\r\n *\r\n * @api public\r\n */\n\nfunction getBinaryPath() {\n  var binaryPath;\n  if (getArgument('--sass-binary-path')) {\n    binaryPath = getArgument('--sass-binary-path');\n  } else if (process.env.SASS_BINARY_PATH) {\n    binaryPath = process.env.SASS_BINARY_PATH;\n  } else if (process.env.npm_config_sass_binary_path) {\n    binaryPath = process.env.npm_config_sass_binary_path;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryPath) {\n    binaryPath = pkg.nodeSassConfig.binaryPath;\n  } else {\n    binaryPath = path.join(getBinaryDir(), getBinaryName().replace(/_(?=binding\\.node)/, '/'));\n  }\n  try {\n    return trueCasePathSync(binaryPath) || binaryPath;\n  } catch (e) {\n    return binaryPath;\n  }\n}\n\n/**\r\n * An array of paths suitable for use as a local disk cache of the binding.\r\n *\r\n * @return {[]String} an array of paths\r\n * @api public\r\n */\nfunction getCachePathCandidates() {\n  return [process.env.npm_config_sass_binary_cache, process.env.npm_config_cache].filter(function (_) {\n    return _;\n  });\n}\n\n/**\r\n * The most suitable location for caching the binding on disk.\r\n *\r\n * Given the candidates directories provided by `getCachePathCandidates()` this\r\n * returns the first writable directory. By treating the candidate directories\r\n * as a prioritised list this method is deterministic, assuming no change to the\r\n * local environment.\r\n *\r\n * @return {String} directory to cache binding\r\n * @api public\r\n */\nfunction getBinaryCachePath() {\n  var i,\n    cachePath,\n    cachePathCandidates = getCachePathCandidates();\n  for (i = 0; i < cachePathCandidates.length; i++) {\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\n    try {\n      fs.mkdirSync(cachePath, {\n        recursive: true\n      });\n      return cachePath;\n    } catch (e) {\n      // Directory is not writable, try another\n    }\n  }\n  return '';\n}\n\n/**\r\n * The cached binding\r\n *\r\n * Check the candidates directories provided by `getCachePathCandidates()` for\r\n * the binding file, if it exists. By treating the candidate directories\r\n * as a prioritised list this method is deterministic, assuming no change to the\r\n * local environment.\r\n *\r\n * @return {String} path to cached binary\r\n * @api public\r\n */\nfunction getCachedBinary() {\n  var i,\n    cachePath,\n    cacheBinary,\n    cachePathCandidates = getCachePathCandidates(),\n    binaryName = getBinaryName();\n  for (i = 0; i < cachePathCandidates.length; i++) {\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\n    cacheBinary = path.join(cachePath, binaryName);\n    if (fs.existsSync(cacheBinary)) {\n      return cacheBinary;\n    }\n  }\n  return '';\n}\n\n/**\r\n * Does the supplied binary path exist\r\n *\r\n * @param {String} binaryPath\r\n * @api public\r\n */\n\nfunction hasBinary(binaryPath) {\n  return fs.existsSync(binaryPath);\n}\n\n/**\r\n * Get Sass version information\r\n *\r\n * @api public\r\n */\n\nfunction getVersionInfo(binding) {\n  return [['node-sass', pkg.version, '(Wrapper)', '[JavaScript]'].join('\\t'), ['libsass  ', binding.libsassVersion(), '(Sass Compiler)', '[C/C++]'].join('\\t')].join(eol);\n}\n\n/**\r\n * Gets the platform variant, currently either an empty string or 'musl' for Linux/musl platforms.\r\n *\r\n * @api public\r\n */\n\nfunction getPlatformVariant() {\n  var contents = '';\n  if (process.platform !== 'linux') {\n    return '';\n  }\n  try {\n    contents = fs.readFileSync(process.execPath);\n    if (contents.indexOf('libc.musl-x86_64.so.1') !== -1) {\n      return 'musl';\n    }\n  } catch (err) {} // eslint-disable-line no-empty\n\n  return '';\n}\nmodule.exports.hasBinary = hasBinary;\nmodule.exports.getBinaryUrl = getBinaryUrl;\nmodule.exports.getBinaryName = getBinaryName;\nmodule.exports.getBinaryDir = getBinaryDir;\nmodule.exports.getBinaryPath = getBinaryPath;\nmodule.exports.getBinaryCachePath = getBinaryCachePath;\nmodule.exports.getCachedBinary = getCachedBinary;\nmodule.exports.getCachePathCandidates = getCachePathCandidates;\nmodule.exports.getVersionInfo = getVersionInfo;\nmodule.exports.getHumanEnvironment = getHumanEnvironment;\nmodule.exports.getInstalledBinaries = getInstalledBinaries;\nmodule.exports.isSupportedEnvironment = isSupportedEnvironment;","map":{"version":3,"names":["eol","require","EOL","fs","path","trueCasePathSync","pkg","defaultBinaryDir","join","__dirname","getHumanPlatform","platform","process","getHumanArchitecture","arch","getHumanNodeVersion","abi","parseInt","versions","modules","getHumanEnvironment","env","binding","replace","parts","split","runtime","length","getInstalledBinaries","readdirSync","getBinaryDir","isSupportedEnvironment","getArgument","name","args","flags","argv","slice","index","lastIndexOf","getBinaryName","binaryName","variant","SASS_BINARY_NAME","npm_config_sass_binary_name","nodeSassConfig","getPlatformVariant","getBinaryUrl","site","SASS_BINARY_SITE","npm_config_sass_binary_site","binarySite","version","binaryDir","SASS_BINARY_DIR","npm_config_sass_binary_dir","getBinaryPath","binaryPath","SASS_BINARY_PATH","npm_config_sass_binary_path","e","getCachePathCandidates","npm_config_sass_binary_cache","npm_config_cache","filter","_","getBinaryCachePath","i","cachePath","cachePathCandidates","mkdirSync","recursive","getCachedBinary","cacheBinary","existsSync","hasBinary","getVersionInfo","libsassVersion","contents","readFileSync","execPath","indexOf","err","module","exports"],"sources":["C:/Users/notre/Documents/Projetos/PORTFOLIO/primeiro-portfolio/node_modules/node-sass/lib/extensions.js"],"sourcesContent":["/*!\r\n * node-sass: lib/extensions.js\r\n */\r\n\r\nvar eol = require('os').EOL,\r\n  fs = require('fs'),\r\n  path = require('path'),\r\n  trueCasePathSync = require('true-case-path'),\r\n  pkg = require('../package.json'),\r\n  defaultBinaryDir = path.join(__dirname, '..', 'vendor');\r\n\r\n/**\r\n * Get the human readable name of the Platform that is running\r\n *\r\n * @param  {string} platform - An OS platform to match, or null to fallback to\r\n * the current process platform\r\n * @return {Object} The name of the platform if matched, false otherwise\r\n *\r\n * @api public\r\n */\r\nfunction getHumanPlatform(platform) {\r\n  switch (platform || process.platform) {\r\n    case 'darwin': return 'OS X';\r\n    case 'freebsd': return 'FreeBSD';\r\n    case 'linux': return 'Linux';\r\n    case 'linux_musl': return 'Linux/musl';\r\n    case 'win32': return 'Windows';\r\n    default: return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Provides a more readable version of the architecture\r\n *\r\n * @param  {string} arch - An instruction architecture name to match, or null to\r\n * lookup the current process architecture\r\n * @return {Object} The value of the process architecture, or false if unknown\r\n *\r\n * @api public\r\n */\r\nfunction getHumanArchitecture(arch) {\r\n  switch (arch || process.arch) {\r\n    case 'ia32': return '32-bit';\r\n    case 'x86': return '32-bit';\r\n    case 'x64': return '64-bit';\r\n    default: return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get the friendly name of the Node environment being run\r\n *\r\n * @param  {Object} abi - A Node Application Binary Interface value, or null to\r\n * fallback to the current Node ABI\r\n * @return {Object} Returns a string name of the Node environment or false if\r\n * unmatched\r\n *\r\n * @api public\r\n */\r\nfunction getHumanNodeVersion(abi) {\r\n  switch (parseInt(abi || process.versions.modules, 10)) {\r\n    case 11: return 'Node 0.10.x';\r\n    case 14: return 'Node 0.12.x';\r\n    case 42: return 'io.js 1.x';\r\n    case 43: return 'io.js 1.1.x';\r\n    case 44: return 'io.js 2.x';\r\n    case 45: return 'io.js 3.x';\r\n    case 46: return 'Node.js 4.x';\r\n    case 47: return 'Node.js 5.x';\r\n    case 48: return 'Node.js 6.x';\r\n    case 49: return 'Electron 1.3.x';\r\n    case 50: return 'Electron 1.4.x';\r\n    case 51: return 'Node.js 7.x';\r\n    case 53: return 'Electron 1.6.x';\r\n    case 57: return 'Node.js 8.x';\r\n    case 59: return 'Node.js 9.x';\r\n    case 64: return 'Node.js 10.x';\r\n    case 67: return 'Node.js 11.x';\r\n    case 72: return 'Node.js 12.x';\r\n    case 79: return 'Node.js 13.x';\r\n    case 83: return 'Node.js 14.x';\r\n    case 88: return 'Node.js 15.x';\r\n    case 93: return 'Node.js 16.x';\r\n    case 102: return 'Node.js 17.x';\r\n    default: return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get a human readable description of where node-sass is running to support\r\n * user error reporting when something goes wrong\r\n *\r\n * @param  {string} env - The name of the native bindings that is to be parsed\r\n * @return {string} A description of what os, architecture, and Node version\r\n * that is being run\r\n *\r\n * @api public\r\n */\r\nfunction getHumanEnvironment(env) {\r\n  var binding = env.replace(/_binding\\.node$/, ''),\r\n    parts = binding.split('-'),\r\n    platform = getHumanPlatform(parts[0]),\r\n    arch = getHumanArchitecture(parts[1]),\r\n    runtime = getHumanNodeVersion(parts[2]);\r\n\r\n  if (parts.length !== 3) {\r\n    return 'Unknown environment (' + binding + ')';\r\n  }\r\n\r\n  if (!platform) {\r\n    platform = 'Unsupported platform (' + parts[0] + ')';\r\n  }\r\n\r\n  if (!arch) {\r\n    arch = 'Unsupported architecture (' + parts[1] + ')';\r\n  }\r\n\r\n  if (!runtime) {\r\n    runtime = 'Unsupported runtime (' + parts[2] + ')';\r\n  }\r\n\r\n  return [\r\n    platform, arch, 'with', runtime,\r\n  ].join(' ');\r\n}\r\n\r\n/**\r\n * Get the value of the binaries under the default path\r\n *\r\n * @return {Array} The currently installed node-sass bindings\r\n *\r\n * @api public\r\n */\r\nfunction getInstalledBinaries() {\r\n  return fs.readdirSync(getBinaryDir());\r\n}\r\n\r\n/**\r\n * Check that an environment matches the allowlisted values or the current\r\n * environment if no parameters are passed\r\n *\r\n * @param  {string} platform - The name of the OS platform(darwin, win32, etc...)\r\n * @param  {string} arch - The instruction set architecture of the Node environment\r\n * @param  {string} abi - The Node Application Binary Interface\r\n * @return {Boolean} True, if node-sass supports the current platform, false otherwise\r\n *\r\n * @api public\r\n */\r\nfunction isSupportedEnvironment(platform, arch, abi) {\r\n  return (\r\n    false !== getHumanPlatform(platform) &&\r\n    false !== getHumanArchitecture(arch) &&\r\n    false !== getHumanNodeVersion(abi)\r\n  );\r\n}\r\n\r\n/**\r\n * Get the value of a CLI argument\r\n *\r\n * @param {String} name\r\n * @param {Array} args\r\n * @api private\r\n */\r\n\r\nfunction getArgument(name, args) {\r\n  var flags = args || process.argv.slice(2),\r\n    index = flags.lastIndexOf(name);\r\n\r\n  if (index === -1 || index + 1 >= flags.length) {\r\n    return null;\r\n  }\r\n\r\n  return flags[index + 1];\r\n}\r\n\r\n/**\r\n * Get binary name.\r\n * If environment variable SASS_BINARY_NAME,\r\n * .npmrc variable sass_binary_name or\r\n * process argument --binary-name is provided,\r\n * return it as is, otherwise make default binary\r\n * name: {platform}-{arch}-{v8 version}.node\r\n *\r\n * @api public\r\n */\r\n\r\nfunction getBinaryName() {\r\n  var binaryName,\r\n    variant,\r\n    platform = process.platform;\r\n\r\n  if (getArgument('--sass-binary-name')) {\r\n    binaryName = getArgument('--sass-binary-name');\r\n  } else if (process.env.SASS_BINARY_NAME) {\r\n    binaryName = process.env.SASS_BINARY_NAME;\r\n  } else if (process.env.npm_config_sass_binary_name) {\r\n    binaryName = process.env.npm_config_sass_binary_name;\r\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryName) {\r\n    binaryName = pkg.nodeSassConfig.binaryName;\r\n  } else {\r\n    variant = getPlatformVariant();\r\n    if (variant) {\r\n      platform += '_' + variant;\r\n    }\r\n\r\n    binaryName = [\r\n      platform, '-',\r\n      process.arch, '-',\r\n      process.versions.modules\r\n    ].join('');\r\n  }\r\n\r\n  return [binaryName, 'binding.node'].join('_');\r\n}\r\n\r\n/**\r\n * Determine the URL to fetch binary file from.\r\n * By default fetch from the node-sass distribution\r\n * site on GitHub.\r\n *\r\n * The default URL can be overridden using\r\n * the environment variable SASS_BINARY_SITE,\r\n * .npmrc variable sass_binary_site or\r\n * or a command line option --sass-binary-site:\r\n *\r\n *   node scripts/install.js --sass-binary-site http://example.com/\r\n *\r\n * The URL should to the mirror of the repository\r\n * laid out as follows:\r\n *\r\n * SASS_BINARY_SITE/\r\n *\r\n *  v3.0.0\r\n *  v3.0.0/freebsd-x64-14_binding.node\r\n *  ....\r\n *  v3.0.0\r\n *  v3.0.0/freebsd-ia32-11_binding.node\r\n *  v3.0.0/freebsd-x64-42_binding.node\r\n *  ... etc. for all supported versions and platforms\r\n *\r\n * @api public\r\n */\r\n\r\nfunction getBinaryUrl() {\r\n  var site = getArgument('--sass-binary-site') ||\r\n             process.env.SASS_BINARY_SITE  ||\r\n             process.env.npm_config_sass_binary_site ||\r\n             (pkg.nodeSassConfig && pkg.nodeSassConfig.binarySite) ||\r\n             'https://github.com/sass/node-sass/releases/download';\r\n\r\n  return [site, 'v' + pkg.version, getBinaryName()].join('/');\r\n}\r\n\r\n/**\r\n * Get binary dir.\r\n * If environment variable SASS_BINARY_DIR,\r\n * .npmrc variable sass_binary_dir or\r\n * process argument --sass-binary-dir is provided,\r\n * select it by appending binary name, otherwise\r\n * use default binary dir.\r\n * Once the primary selection is made, check if\r\n * callers wants to throw if file not exists before\r\n * returning.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction getBinaryDir() {\r\n  var binaryDir;\r\n\r\n  if (getArgument('--sass-binary-dir')) {\r\n    binaryDir = getArgument('--sass-binary-dir');\r\n  } else if (process.env.SASS_BINARY_DIR) {\r\n    binaryDir = process.env.SASS_BINARY_DIR;\r\n  } else if (process.env.npm_config_sass_binary_dir) {\r\n    binaryDir = process.env.npm_config_sass_binary_dir;\r\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryDir) {\r\n    binaryDir = pkg.nodeSassConfig.binaryDir;\r\n  } else {\r\n    binaryDir = defaultBinaryDir;\r\n  }\r\n\r\n  return binaryDir;\r\n}\r\n\r\n/**\r\n * Get binary path.\r\n * If environment variable SASS_BINARY_PATH,\r\n * .npmrc variable sass_binary_path or\r\n * process argument --sass-binary-path is provided,\r\n * select it by appending binary name, otherwise\r\n * make default binary path using binary name.\r\n * Once the primary selection is made, check if\r\n * callers wants to throw if file not exists before\r\n * returning.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction getBinaryPath() {\r\n  var binaryPath;\r\n\r\n  if (getArgument('--sass-binary-path')) {\r\n    binaryPath = getArgument('--sass-binary-path');\r\n  } else if (process.env.SASS_BINARY_PATH) {\r\n    binaryPath = process.env.SASS_BINARY_PATH;\r\n  } else if (process.env.npm_config_sass_binary_path) {\r\n    binaryPath = process.env.npm_config_sass_binary_path;\r\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryPath) {\r\n    binaryPath = pkg.nodeSassConfig.binaryPath;\r\n  } else {\r\n    binaryPath = path.join(getBinaryDir(), getBinaryName().replace(/_(?=binding\\.node)/, '/'));\r\n  }\r\n\r\n  try {\r\n    return trueCasePathSync(binaryPath) || binaryPath;\r\n  } catch (e) {\r\n    return binaryPath;\r\n  }\r\n}\r\n\r\n/**\r\n * An array of paths suitable for use as a local disk cache of the binding.\r\n *\r\n * @return {[]String} an array of paths\r\n * @api public\r\n */\r\nfunction getCachePathCandidates() {\r\n  return [\r\n    process.env.npm_config_sass_binary_cache,\r\n    process.env.npm_config_cache,\r\n  ].filter(function(_) { return _; });\r\n}\r\n\r\n/**\r\n * The most suitable location for caching the binding on disk.\r\n *\r\n * Given the candidates directories provided by `getCachePathCandidates()` this\r\n * returns the first writable directory. By treating the candidate directories\r\n * as a prioritised list this method is deterministic, assuming no change to the\r\n * local environment.\r\n *\r\n * @return {String} directory to cache binding\r\n * @api public\r\n */\r\nfunction getBinaryCachePath() {\r\n  var i,\r\n    cachePath,\r\n    cachePathCandidates = getCachePathCandidates();\r\n\r\n  for (i = 0; i < cachePathCandidates.length; i++) {\r\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\r\n\r\n    try {\r\n      fs.mkdirSync(cachePath, {recursive: true});\r\n      return cachePath;\r\n    } catch (e) {\r\n      // Directory is not writable, try another\r\n    }\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\n/**\r\n * The cached binding\r\n *\r\n * Check the candidates directories provided by `getCachePathCandidates()` for\r\n * the binding file, if it exists. By treating the candidate directories\r\n * as a prioritised list this method is deterministic, assuming no change to the\r\n * local environment.\r\n *\r\n * @return {String} path to cached binary\r\n * @api public\r\n */\r\nfunction getCachedBinary() {\r\n  var i,\r\n    cachePath,\r\n    cacheBinary,\r\n    cachePathCandidates = getCachePathCandidates(),\r\n    binaryName = getBinaryName();\r\n\r\n  for (i = 0; i < cachePathCandidates.length; i++) {\r\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\r\n    cacheBinary = path.join(cachePath, binaryName);\r\n\r\n    if (fs.existsSync(cacheBinary)) {\r\n      return cacheBinary;\r\n    }\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\n/**\r\n * Does the supplied binary path exist\r\n *\r\n * @param {String} binaryPath\r\n * @api public\r\n */\r\n\r\nfunction hasBinary(binaryPath) {\r\n  return fs.existsSync(binaryPath);\r\n}\r\n\r\n/**\r\n * Get Sass version information\r\n *\r\n * @api public\r\n */\r\n\r\nfunction getVersionInfo(binding) {\r\n  return [\r\n    ['node-sass', pkg.version, '(Wrapper)', '[JavaScript]'].join('\\t'),\r\n    ['libsass  ', binding.libsassVersion(), '(Sass Compiler)', '[C/C++]'].join('\\t'),\r\n  ].join(eol);\r\n}\r\n\r\n/**\r\n * Gets the platform variant, currently either an empty string or 'musl' for Linux/musl platforms.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction getPlatformVariant() {\r\n  var contents = '';\r\n\r\n  if (process.platform !== 'linux') {\r\n    return '';\r\n  }\r\n\r\n  try {\r\n    contents = fs.readFileSync(process.execPath);\r\n\r\n    if (contents.indexOf('libc.musl-x86_64.so.1') !== -1) {\r\n      return 'musl';\r\n    }\r\n  } catch (err) { } // eslint-disable-line no-empty\r\n\r\n  return '';\r\n}\r\n\r\nmodule.exports.hasBinary = hasBinary;\r\nmodule.exports.getBinaryUrl = getBinaryUrl;\r\nmodule.exports.getBinaryName = getBinaryName;\r\nmodule.exports.getBinaryDir = getBinaryDir;\r\nmodule.exports.getBinaryPath = getBinaryPath;\r\nmodule.exports.getBinaryCachePath = getBinaryCachePath;\r\nmodule.exports.getCachedBinary = getCachedBinary;\r\nmodule.exports.getCachePathCandidates = getCachePathCandidates;\r\nmodule.exports.getVersionInfo = getVersionInfo;\r\nmodule.exports.getHumanEnvironment = getHumanEnvironment;\r\nmodule.exports.getInstalledBinaries = getInstalledBinaries;\r\nmodule.exports.isSupportedEnvironment = isSupportedEnvironment;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,IAAI,CAAC,CAACC,GAAG;EACzBC,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;EAClBG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;EACtBI,gBAAgB,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;EAC5CK,GAAG,GAAGL,OAAO,CAAC,iBAAiB,CAAC;EAChCM,gBAAgB,GAAGH,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,QAAQ,EAAE;EAClC,QAAQA,QAAQ,IAAIC,OAAO,CAACD,QAAQ;IAClC,KAAK,QAAQ;MAAE,OAAO,MAAM;IAC5B,KAAK,SAAS;MAAE,OAAO,SAAS;IAChC,KAAK,OAAO;MAAE,OAAO,OAAO;IAC5B,KAAK,YAAY;MAAE,OAAO,YAAY;IACtC,KAAK,OAAO;MAAE,OAAO,SAAS;IAC9B;MAAS,OAAO,KAAK;EAAC;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,oBAAoB,CAACC,IAAI,EAAE;EAClC,QAAQA,IAAI,IAAIF,OAAO,CAACE,IAAI;IAC1B,KAAK,MAAM;MAAE,OAAO,QAAQ;IAC5B,KAAK,KAAK;MAAE,OAAO,QAAQ;IAC3B,KAAK,KAAK;MAAE,OAAO,QAAQ;IAC3B;MAAS,OAAO,KAAK;EAAC;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmB,CAACC,GAAG,EAAE;EAChC,QAAQC,QAAQ,CAACD,GAAG,IAAIJ,OAAO,CAACM,QAAQ,CAACC,OAAO,EAAE,EAAE,CAAC;IACnD,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,WAAW;IAC3B,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,WAAW;IAC3B,KAAK,EAAE;MAAE,OAAO,WAAW;IAC3B,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,gBAAgB;IAChC,KAAK,EAAE;MAAE,OAAO,gBAAgB;IAChC,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,gBAAgB;IAChC,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,aAAa;IAC7B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,EAAE;MAAE,OAAO,cAAc;IAC9B,KAAK,GAAG;MAAE,OAAO,cAAc;IAC/B;MAAS,OAAO,KAAK;EAAC;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmB,CAACC,GAAG,EAAE;EAChC,IAAIC,OAAO,GAAGD,GAAG,CAACE,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;IAC9CC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC;IAC1Bd,QAAQ,GAAGD,gBAAgB,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC;IACrCV,IAAI,GAAGD,oBAAoB,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;IACrCE,OAAO,GAAGX,mBAAmB,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;EAEzC,IAAIA,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,uBAAuB,GAAGL,OAAO,GAAG,GAAG;EAChD;EAEA,IAAI,CAACX,QAAQ,EAAE;IACbA,QAAQ,GAAG,wBAAwB,GAAGa,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;EACtD;EAEA,IAAI,CAACV,IAAI,EAAE;IACTA,IAAI,GAAG,4BAA4B,GAAGU,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;EACtD;EAEA,IAAI,CAACE,OAAO,EAAE;IACZA,OAAO,GAAG,uBAAuB,GAAGF,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;EACpD;EAEA,OAAO,CACLb,QAAQ,EAAEG,IAAI,EAAE,MAAM,EAAEY,OAAO,CAChC,CAAClB,IAAI,CAAC,GAAG,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,oBAAoB,GAAG;EAC9B,OAAOzB,EAAE,CAAC0B,WAAW,CAACC,YAAY,EAAE,CAAC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,CAACpB,QAAQ,EAAEG,IAAI,EAAEE,GAAG,EAAE;EACnD,OACE,KAAK,KAAKN,gBAAgB,CAACC,QAAQ,CAAC,IACpC,KAAK,KAAKE,oBAAoB,CAACC,IAAI,CAAC,IACpC,KAAK,KAAKC,mBAAmB,CAACC,GAAG,CAAC;AAEtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASgB,WAAW,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC/B,IAAIC,KAAK,GAAGD,IAAI,IAAItB,OAAO,CAACwB,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;IACvCC,KAAK,GAAGH,KAAK,CAACI,WAAW,CAACN,IAAI,CAAC;EAEjC,IAAIK,KAAK,KAAK,CAAC,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIH,KAAK,CAACR,MAAM,EAAE;IAC7C,OAAO,IAAI;EACb;EAEA,OAAOQ,KAAK,CAACG,KAAK,GAAG,CAAC,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,aAAa,GAAG;EACvB,IAAIC,UAAU;IACZC,OAAO;IACP/B,QAAQ,GAAGC,OAAO,CAACD,QAAQ;EAE7B,IAAIqB,WAAW,CAAC,oBAAoB,CAAC,EAAE;IACrCS,UAAU,GAAGT,WAAW,CAAC,oBAAoB,CAAC;EAChD,CAAC,MAAM,IAAIpB,OAAO,CAACS,GAAG,CAACsB,gBAAgB,EAAE;IACvCF,UAAU,GAAG7B,OAAO,CAACS,GAAG,CAACsB,gBAAgB;EAC3C,CAAC,MAAM,IAAI/B,OAAO,CAACS,GAAG,CAACuB,2BAA2B,EAAE;IAClDH,UAAU,GAAG7B,OAAO,CAACS,GAAG,CAACuB,2BAA2B;EACtD,CAAC,MAAM,IAAItC,GAAG,CAACuC,cAAc,IAAIvC,GAAG,CAACuC,cAAc,CAACJ,UAAU,EAAE;IAC9DA,UAAU,GAAGnC,GAAG,CAACuC,cAAc,CAACJ,UAAU;EAC5C,CAAC,MAAM;IACLC,OAAO,GAAGI,kBAAkB,EAAE;IAC9B,IAAIJ,OAAO,EAAE;MACX/B,QAAQ,IAAI,GAAG,GAAG+B,OAAO;IAC3B;IAEAD,UAAU,GAAG,CACX9B,QAAQ,EAAE,GAAG,EACbC,OAAO,CAACE,IAAI,EAAE,GAAG,EACjBF,OAAO,CAACM,QAAQ,CAACC,OAAO,CACzB,CAACX,IAAI,CAAC,EAAE,CAAC;EACZ;EAEA,OAAO,CAACiC,UAAU,EAAE,cAAc,CAAC,CAACjC,IAAI,CAAC,GAAG,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASuC,YAAY,GAAG;EACtB,IAAIC,IAAI,GAAGhB,WAAW,CAAC,oBAAoB,CAAC,IACjCpB,OAAO,CAACS,GAAG,CAAC4B,gBAAgB,IAC5BrC,OAAO,CAACS,GAAG,CAAC6B,2BAA2B,IACtC5C,GAAG,CAACuC,cAAc,IAAIvC,GAAG,CAACuC,cAAc,CAACM,UAAW,IACrD,qDAAqD;EAEhE,OAAO,CAACH,IAAI,EAAE,GAAG,GAAG1C,GAAG,CAAC8C,OAAO,EAAEZ,aAAa,EAAE,CAAC,CAAChC,IAAI,CAAC,GAAG,CAAC;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASsB,YAAY,GAAG;EACtB,IAAIuB,SAAS;EAEb,IAAIrB,WAAW,CAAC,mBAAmB,CAAC,EAAE;IACpCqB,SAAS,GAAGrB,WAAW,CAAC,mBAAmB,CAAC;EAC9C,CAAC,MAAM,IAAIpB,OAAO,CAACS,GAAG,CAACiC,eAAe,EAAE;IACtCD,SAAS,GAAGzC,OAAO,CAACS,GAAG,CAACiC,eAAe;EACzC,CAAC,MAAM,IAAI1C,OAAO,CAACS,GAAG,CAACkC,0BAA0B,EAAE;IACjDF,SAAS,GAAGzC,OAAO,CAACS,GAAG,CAACkC,0BAA0B;EACpD,CAAC,MAAM,IAAIjD,GAAG,CAACuC,cAAc,IAAIvC,GAAG,CAACuC,cAAc,CAACQ,SAAS,EAAE;IAC7DA,SAAS,GAAG/C,GAAG,CAACuC,cAAc,CAACQ,SAAS;EAC1C,CAAC,MAAM;IACLA,SAAS,GAAG9C,gBAAgB;EAC9B;EAEA,OAAO8C,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,aAAa,GAAG;EACvB,IAAIC,UAAU;EAEd,IAAIzB,WAAW,CAAC,oBAAoB,CAAC,EAAE;IACrCyB,UAAU,GAAGzB,WAAW,CAAC,oBAAoB,CAAC;EAChD,CAAC,MAAM,IAAIpB,OAAO,CAACS,GAAG,CAACqC,gBAAgB,EAAE;IACvCD,UAAU,GAAG7C,OAAO,CAACS,GAAG,CAACqC,gBAAgB;EAC3C,CAAC,MAAM,IAAI9C,OAAO,CAACS,GAAG,CAACsC,2BAA2B,EAAE;IAClDF,UAAU,GAAG7C,OAAO,CAACS,GAAG,CAACsC,2BAA2B;EACtD,CAAC,MAAM,IAAIrD,GAAG,CAACuC,cAAc,IAAIvC,GAAG,CAACuC,cAAc,CAACY,UAAU,EAAE;IAC9DA,UAAU,GAAGnD,GAAG,CAACuC,cAAc,CAACY,UAAU;EAC5C,CAAC,MAAM;IACLA,UAAU,GAAGrD,IAAI,CAACI,IAAI,CAACsB,YAAY,EAAE,EAAEU,aAAa,EAAE,CAACjB,OAAO,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;EAC5F;EAEA,IAAI;IACF,OAAOlB,gBAAgB,CAACoD,UAAU,CAAC,IAAIA,UAAU;EACnD,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAOH,UAAU;EACnB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,sBAAsB,GAAG;EAChC,OAAO,CACLjD,OAAO,CAACS,GAAG,CAACyC,4BAA4B,EACxClD,OAAO,CAACS,GAAG,CAAC0C,gBAAgB,CAC7B,CAACC,MAAM,CAAC,UAASC,CAAC,EAAE;IAAE,OAAOA,CAAC;EAAE,CAAC,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,GAAG;EAC5B,IAAIC,CAAC;IACHC,SAAS;IACTC,mBAAmB,GAAGR,sBAAsB,EAAE;EAEhD,KAAKM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,mBAAmB,CAAC1C,MAAM,EAAEwC,CAAC,EAAE,EAAE;IAC/CC,SAAS,GAAGhE,IAAI,CAACI,IAAI,CAAC6D,mBAAmB,CAACF,CAAC,CAAC,EAAE7D,GAAG,CAAC2B,IAAI,EAAE3B,GAAG,CAAC8C,OAAO,CAAC;IAEpE,IAAI;MACFjD,EAAE,CAACmE,SAAS,CAACF,SAAS,EAAE;QAACG,SAAS,EAAE;MAAI,CAAC,CAAC;MAC1C,OAAOH,SAAS;IAClB,CAAC,CAAC,OAAOR,CAAC,EAAE;MACV;IAAA;EAEJ;EAEA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASY,eAAe,GAAG;EACzB,IAAIL,CAAC;IACHC,SAAS;IACTK,WAAW;IACXJ,mBAAmB,GAAGR,sBAAsB,EAAE;IAC9CpB,UAAU,GAAGD,aAAa,EAAE;EAE9B,KAAK2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,mBAAmB,CAAC1C,MAAM,EAAEwC,CAAC,EAAE,EAAE;IAC/CC,SAAS,GAAGhE,IAAI,CAACI,IAAI,CAAC6D,mBAAmB,CAACF,CAAC,CAAC,EAAE7D,GAAG,CAAC2B,IAAI,EAAE3B,GAAG,CAAC8C,OAAO,CAAC;IACpEqB,WAAW,GAAGrE,IAAI,CAACI,IAAI,CAAC4D,SAAS,EAAE3B,UAAU,CAAC;IAE9C,IAAItC,EAAE,CAACuE,UAAU,CAACD,WAAW,CAAC,EAAE;MAC9B,OAAOA,WAAW;IACpB;EACF;EAEA,OAAO,EAAE;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,SAAS,CAAClB,UAAU,EAAE;EAC7B,OAAOtD,EAAE,CAACuE,UAAU,CAACjB,UAAU,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASmB,cAAc,CAACtD,OAAO,EAAE;EAC/B,OAAO,CACL,CAAC,WAAW,EAAEhB,GAAG,CAAC8C,OAAO,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC5C,IAAI,CAAC,IAAI,CAAC,EAClE,CAAC,WAAW,EAAEc,OAAO,CAACuD,cAAc,EAAE,EAAE,iBAAiB,EAAE,SAAS,CAAC,CAACrE,IAAI,CAAC,IAAI,CAAC,CACjF,CAACA,IAAI,CAACR,GAAG,CAAC;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS8C,kBAAkB,GAAG;EAC5B,IAAIgC,QAAQ,GAAG,EAAE;EAEjB,IAAIlE,OAAO,CAACD,QAAQ,KAAK,OAAO,EAAE;IAChC,OAAO,EAAE;EACX;EAEA,IAAI;IACFmE,QAAQ,GAAG3E,EAAE,CAAC4E,YAAY,CAACnE,OAAO,CAACoE,QAAQ,CAAC;IAE5C,IAAIF,QAAQ,CAACG,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAE;MACpD,OAAO,MAAM;IACf;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAE,CAAC,CAAC;;EAElB,OAAO,EAAE;AACX;AAEAC,MAAM,CAACC,OAAO,CAACT,SAAS,GAAGA,SAAS;AACpCQ,MAAM,CAACC,OAAO,CAACrC,YAAY,GAAGA,YAAY;AAC1CoC,MAAM,CAACC,OAAO,CAAC5C,aAAa,GAAGA,aAAa;AAC5C2C,MAAM,CAACC,OAAO,CAACtD,YAAY,GAAGA,YAAY;AAC1CqD,MAAM,CAACC,OAAO,CAAC5B,aAAa,GAAGA,aAAa;AAC5C2B,MAAM,CAACC,OAAO,CAAClB,kBAAkB,GAAGA,kBAAkB;AACtDiB,MAAM,CAACC,OAAO,CAACZ,eAAe,GAAGA,eAAe;AAChDW,MAAM,CAACC,OAAO,CAACvB,sBAAsB,GAAGA,sBAAsB;AAC9DsB,MAAM,CAACC,OAAO,CAACR,cAAc,GAAGA,cAAc;AAC9CO,MAAM,CAACC,OAAO,CAAChE,mBAAmB,GAAGA,mBAAmB;AACxD+D,MAAM,CAACC,OAAO,CAACxD,oBAAoB,GAAGA,oBAAoB;AAC1DuD,MAAM,CAACC,OAAO,CAACrD,sBAAsB,GAAGA,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}